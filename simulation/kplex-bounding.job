#!/bin/bash
               
#SBATCH --job-name=kplex             ### Name of the job                
#SBATCH --ntasks=96                     ### Number of Tasks
#SBATCH --cpus-per-task=1              ### Number of Tasks per CPU    
#SBATCH --mem-per-cpu=10000                        ### Memory required, 4 gigabyte
#SBATCH --partition=medium             ### Cheaha Partition    
#SBATCH --time=6:00:00                 ### Estimated Time of Completion, 1 hour
#SBATCH --output=%x.out              ### Slurm Output file, %x is job name, %j is job id    
#SBATCH --error=%x.err               ### Slurm Error file, %x is job name, %j is job id    
#SBATCH --mail-type=END
#SBATCH --mail-user=akhlaque.ak@gmail.com

datasets='
 sc-msdoor 
 socfb-Duke14 
 sc-ldoor 
 soc-digg 
 soc-LiveMocha 
 soc-flixster 
 tech-WHOIS 
 hamming6-2 
 johnson8-4-4 
'
result=results.out
# remove old stuff
solutions='kplex-c-size 	 kplex-threshold'
for sol in $solutions; do
    rm $sol-*.out
done
rm $result


# for kplex in $solutions; do
sol=kplex-c-size
csize='10 20 50 100'
for c in $csize; do
for k in {2..5}; do
for fn in $datasets; do
# for sol in $solutions; do
    echo "computing $fn.... " 
    srun --nodes=1 --ntasks=1 --time=01:00:00 --exclusive ./$sol -g ~/MaximumKPlex/datasets/graphs/Chang/$fn -a exact -k $k -c $c >> $sol-$c-$k.out &
# done
done
done
done

sol=kplex-threshold
cthresh='1.2 1.4 1.8 2 3 4 5'
for c in $cthresh; do
for k in {2..5}; do
for fn in $datasets; do
# for sol in $solutions; do
    echo "computing $fn.... " 
    srun --nodes=1 --ntasks=1 --time=01:00:00 --exclusive ./$sol -g ~/MaximumKPlex/datasets/graphs/Chang/$fn -a exact -k $k -c $c >> $sol-$c-$k.out &
# done
done
done
done
wait


result=results.out
rm $result

cs
rm $result
for c in $csize; do
for k in {2..5}; do
    echo "================= k=$k =================" >> $result
    echo -en "datasets\t" >>$result
    for sol in $solutions; do
        echo -en "${sol#*-}\t" >> $result
    done
    # done
    echo >>$result
    for fn in $datasets; do
    echo -en "$fn\t" >> $result
        line=()
        for sol in $solutions; do
            outfile=$sol-$k.out
            op=`grep $fn $outfile`
            if [ -z "${op}" ]; then 
                line+=('9999999999')
            else
                op=($op)
                line+=(${op[-3]})
            fi
        done
        m=`printf "%s\n" "${line[@]}" | sort -rn | tail -n1`
        echo ${line[@]}
        for i in "${line[@]}"; do 
            if [ $i == '9999999999' ]; then
                echo -en '-\t' >> $result
            elif [ $i == $m ] ; then
                echo $i | bc -l | xargs printf "*%.1f\t" >> $result
            else
                echo $i | bc -l | xargs printf "%.1f\t" >> $result
            fi 
        done
    echo >> $result
    done
done

result=kpsize.out
rm $result
for fn in $datasets; do
echo -en "$fn\t" >> $result
for k in {2..5}; do
for sol in $solutions; do
    outfile=$sol-$k.out
    # [ -e "$fn" ] || continue
    op=`grep $fn $outfile`
    if [ -z "${op}" ]; then 
        echo -en "-\t" >> $result
    else
        op=($op)
        echo -en "${op[-5]}\t" >> $result
    fi
done
done
echo >> $result
done


result=seesaw.out
rm $result
sol=kplex-full
for k in {2..5}; do
    echo >> $result

    echo "seesaw-cost">>$result
    for fn in $datasets; do

            outfile=$sol-$k.out
            # [ -e "$fn" ] || continue
            op=`grep $fn $outfile`
            if [ -z "${op}" ]; then 
                echo -en "-\t" >> $result
            else
                op=($op)
                echo -en "${op[-1]}\t" >> $result
            fi
            echo >> $result
    done
done