#!/bin/bash

#SBATCH --job-name=kplex             ### Name of the job
#SBATCH --ntasks=96                    ### Number of Tasks
#SBATCH --cpus-per-task=1              ### Number of Tasks per CPU
#SBATCH --mem-per-cpu=10000                        ### Memory required, 4 gigabyte
#SBATCH --partition=medium             ### Cheaha Partition
#SBATCH --time=24:00:00                 ### Estimated Time of Completion, 1 hour
#SBATCH --output=%x.out              ### Slurm Output file, %x is job name, %j is job id
#SBATCH --error=%x.err               ### Slurm Error file, %x is job name, %j is job id
#SBATCH --mail-type=END
#SBATCH --mail-user=akhlaque.ak@gmail.com

run_jobs() {
    # for kplex in $solutions; do
    for fn in $datasets; do
        for sol in $solutions; do
            for c in {1..5}; do
                outfile=$sol-$c.out
                op=$(grep $fn $outfile)
                if [ -z "${op}" ]; then

                    srun --nodes=1 --ntasks=1 -c 1 --time=$1 --exclusive ./$sol -b -g $fn -a exact -k 5 -c $c >>$sol-$c.out &

                fi
            done
        done
    done
    wait
}

get_results() {
    result=results.out
    rm $result
    for c in {1..5}; do
        echo -en "**** k=$c ****,,," >>$result
    done
    echo -en "\ndatasets," >>$result

    for k in {1..5}; do
        for sol in $solutions; do
            echo -en "${sol#*-}," >>$result
        done
        echo -en "," >>$result
    done

    echo >>$result

    for fn in $datasets; do
        echo -en "$fn,|," >>$result
        for c in {1..5}; do

            line=($(grep $fn $sol-$c.out))

            echo -en "${line[-11]}," >>$result
        done
        echo >>$result
    done
    cat $result
}

get_kpsize() {
    # solutions='kplex-full kplex-doubt kPlexS Maple'
    result=kpsize.out
    rm $result
    for k in {2..5}; do
        echo "================= k=$c =================" >>$result
        echo -en "datasets," >>$result
        for sol in $solutions; do
            echo -en "${sol#*-}," >>$result
        done
        # done
        echo >>$result
        for fn in $datasets; do
            echo -en "$fn," >>$result
            for sol in $solutions; do
                outfile=$sol-$c.out
                op=$(grep $fn $outfile)
                if [ -z "${op}" ]; then
                    echo -en '-,' >>$result
                else
                    op=($op)
                    echo -en "${op[-5]}," >>$result
                fi
            done
            echo >>$result
        done
    done
}

get_cost() {

    result=seesaw.out
    rm $result
    sol=kplex-nosetEnum
    for k in {2..5}; do
        echo >>$result

        echo "seesaw-cost" >>$result
        for fn in $datasets; do

            outfile=$sol-$c.out
            # [ -e "$fn" ] || continue
            op=$(grep $fn $outfile)
            if [ -z "${op}" ]; then
                echo -en "-," >>$result
            else
                op=($op)
                echo -en "${op[-1]}," >>$result
            fi
            echo >>$result
        done
    done
}

del_prev() {
    for sol in $solutions; do
        rm $sol-*.out
    done
}


datasets=$(ls ~/graphs/ablation/*.bin)

solutions='kPlexTBs'

del_prev
run_jobs 00:30:00


datasets=$(ls ~/graphs/ablation/*.bin | xargs -n 1 basename)
solutions='kPlexTBs'

get_results
get_kpsize
get_cost
