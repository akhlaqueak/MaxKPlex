#!/bin/bash

#SBATCH --job-name=dense             ### Name of the job
#SBATCH --ntasks=128                    ### Number of Tasks
#SBATCH --cpus-per-task=1              ### Number of Tasks per CPU
#SBATCH --mem-per-cpu=10000                        ### Memory required, 4 gigabyte
#SBATCH --partition=medium             ### Cheaha Partition
#SBATCH --time=24:00:00                 ### Estimated Time of Completion, 1 hour
#SBATCH --output=%x.out              ### Slurm Output file, %x is job name, %j is job id
#SBATCH --error=%x.err               ### Slurm Error file, %x is job name, %j is job id
#SBATCH --mail-type=END
#SBATCH --mail-user=akhlaque.ak@gmail.com

run_jobs() {
    # for kplex in $solutions; do
    for fn in $datasets; do
        for sol in $solutions; do
            for k in $krange; do
                # graph=~/graphs/network_repo/$fn
                graph=~/graphs/ablation/$fn

                srun --nodes=1 --ntasks=1 -c 1 --time=$1 --exclusive ./$SOL -b -g $graph -a exact -k $k -c $sol >>$SOL-$sol-$k.out &

            done
        done
    done
    wait
}

get_results() {
    result=results.out
    rm $result
    # for k in {2..5}; do
    #     echo -en "**** k=$k ****,,," >>$result
    # done
    echo -en "datasets," >>$result

    for k in $krange; do
        echo -en "**k=$k**," >>$result
        for sol in $solutions; do
            echo -en "${sol#*-}," >>$result
        done
    done

    echo >>$result

    for fn in $datasets; do
        echo -en "$fn,|," >>$result
        for k in $krange; do

            line=()
            outfile=''
            for sol in $solutions; do

                outfile=$sol-$k.out
                # outfile=$SOL-$sol-$k.out
                op=$(grep $fn $outfile)
                if [ -z "${op}" ]; then
                    line+=('9999999999')
                else
                    op=($op)
                    line+=(${op[-3]})
                fi
            done
            m=$(printf "%s\n" "${line[@]}" | sort -rn | tail -n1)
            secm=$(printf "%s\n" "${line[@]}" | sort -rn | tail -n2 | head -n1)
            echo ${line[@]}
            for i in "${line[@]}"; do
                if [ $i == '9999999999' ]; then
                    echo -en 'x,' >>$result
                elif [ $i == $m ]; then
                    echo $i | bc -l | xargs printf "*%.1f," >>$result
                elif [ $i == $secm ]; then
                    echo $i | bc -l | xargs printf "^%.1f," >>$result
                else
                    echo $i | bc -l | xargs printf "%.1f," >>$result
                fi
            done
            echo -en "|," >>$result
        done
        echo >>$result
    done
    cat $result
}

get_kpsize() {
    # solutions='kplex-full kplex-doubt kPlexS Maple'
    result=kpsize.out
    rm $result
    for k in $krange; do
        echo "================= k=$k =================" >>$result
        echo -en "datasets," >>$result
        for sol in $solutions; do
            echo -en "${sol#*-}," >>$result
        done
        # done
        echo >>$result
        for fn in $datasets; do
            echo -en "$fn," >>$result
            outfile=''
            for sol in $solutions; do

                outfile=$SOL-$sol-$k.out
                op=$(grep $fn $outfile)
                if [ -z "${op}" ]; then
                    echo -en '-,' >>$result
                else
                    op=($op)
                    echo -en "${op[-5]}," >>$result
                fi
            done
            echo >>$result
        done
    done
}

get_cost() {

    result=seesaw.out
    rm $result
    for k in {2..5}; do
        echo >>$result

        echo "seesaw-cost" >>$result
        for fn in $datasets; do

            outfile=$sol-$k.out
            # [ -e "$fn" ] || continue
            op=$(grep $fn $outfile)
            if [ -z "${op}" ]; then
                echo -en "-," >>$result
            else
                op=($op)
                echo -en "${op[-1]}," >>$result
            fi
            echo >>$result
        done
    done
}

del_prev() {
    for sol in $solutions; do
        rm $SOL-$sol-*.out
    done
}

krange='2 3 4 5'
datasets=$(ls ~/graphs/ablation/*.bin | xargs -n 1 basename)
SOL=kPlexTBs-hybrid2
# datasets='
# soc-digg.bin
# socfb-Duke14.bin
# tech-as-skitter.bin
# soc-LiveMocha.bin
# ia-wiki-Talk.bin
# soc-orkut.bin
# soc-gowalla.bin
# soc-youtube-snap.bin
# soc-lastfm.bin
# soc-youtube.bin
# socfb-B-anon.bin
# socfb-A-anon.bin
# web-wikipedia2009.bin
# soc-pokec.bin
# ia-enron-large.bin
# socfb-Stanford3.bin
# socfb-CMU.bin
# sc-nasasrb.bin
# socfb-MIT.bin
# soc-epinions.bin
# sc-pwtk.bin
# soc-twitter-follows.bin
# socfb-Indiana.bin
# soc-delicious.bin
# scc_reality.bin
# ia-email-EU.bin
# socfb-uci-uni.bin
# sc-ldoor.bin
# inf-road-usa.bin
# soc-douban.bin
# '

solutions="Maple kPlexTBs kPlexTBs-hybrid2-1000000 kPlexTBs-hybrid2-5000000 kPlexTBs-hybrid2-10000000 kPlexTBs-hybrid2-20000000"
del_prev
run_jobs 00:30:00
# solutions=$(seq 0.2 0.05 0.9)

get_results
get_kpsize
get_cost
