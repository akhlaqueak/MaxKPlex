#!/bin/bash

#SBATCH --job-name=serial             ### Name of the job
#SBATCH --ntasks=24                    ### Number of Tasks
#SBATCH --cpus-per-task=1              ### Number of Tasks per CPU
#SBATCH --mem-per-cpu=10000                        ### Memory required, 4 gigabyte
#SBATCH --partition=short             ### Cheaha Partition
#SBATCH --time=10:00:00                 ### Estimated Time of Completion, 1 hour
#SBATCH --output=%x.out              ### Slurm Output file, %x is job name, %j is job id
#SBATCH --error=%x.err               ### Slurm Error file, %x is job name, %j is job id
#SBATCH --mail-type=END
#SBATCH --mail-user=akhlaque.ak@gmail.com

run_jobs() {
    # for kplex in $solutions; do
    for fn in $datasets; do
        for sol in $solutions; do
            for k in $krange; do
                outfile=$fn-$sol-$k.out

                        # echo "computing --time=$1 --exclusive $sol $fn $k >>$sol-$k.out.... "
                        if [[ $sol =~ "UMKP" ]] || [[ $sol =~ "Maple" ]] || [ $sol == 'KpLeX' ] || [ $sol == 'DiseMKP' ]; then
                            srun --unbuffered --nodes=1 --ntasks=1 -c 1 --time=$1 --exclusive ./$sol ~/graphs/test25/$fn.bin $k $2 >>$outfile 2>&1 &
                        else
                            srun --unbuffered --nodes=1 --ntasks=1 -c 1 --time=$1 --exclusive ./$sol -b -g ~/graphs/test25/$fn.bin -a exact -k $k -c 3 >>$outfile 2>&1 &
                        fi

            done
        done
    done
    wait
}
    get_results() {
        result=results.out
        rm $result
        echo -en "," >>$result
        WORD_COUNT=$(echo "$solutions" | wc -w)
        for k in $krange; do
            echo -en "**k=$k**," >>$result
            for ((i = 1; i < $WORD_COUNT; i++)); do
                echo -en "," >>$result
            done
            # echo -en "|," >>$result
        done
        echo >>$result

        echo -en "datasets," >>$result
        for k in $krange; do
            for sol in $solutions; do
                echo -en "${sol#*-}," >>$result
            done
            # echo -en "|," >>$result
        done
        echo >>$result

        for fn in $datasets; do
            echo -en "$fn," >>$result
            for k in $krange; do

                line=()
                outfile=''
                for sol in $solutions; do
                    outfile=$fn-$sol-$k.out
                    op=$(grep ">>" $outfile | head -1)
                    if [ -z "${op}" ]; then
                        line+=('9999999999')
                    else
                        op=($op)
                        line+=(${op[-3]})
                    fi
                done
                m=$(printf "%s\n" "${line[@]}" | sort -rn | tail -n1)
                secm=$(printf "%s\n" "${line[@]}" | sort -rn | tail -n2 | head -n1)
                echo ${line[@]}
                for i in "${line[@]}"; do
                    if [ $i == '9999999999' ]; then
                        echo -en '×,' >>$result
                    elif [ $i == $m ]; then
                        echo $i | bc -l | xargs printf "*%.1f," >>$result
                    elif [ $i == $secm ]; then
                        echo $i | bc -l | xargs printf "^%.1f," >>$result
                    else
                        echo $i | bc -l | xargs printf "%.1f," >>$result
                    fi
                done
                # echo -en "|," >>$result
            done
            echo >>$result
        done
        cat $result
    }
    get_results

get_results_dense() {
    result=results.out
    rm $result
    echo -en "," >>$result
    WORD_COUNT=$(echo "$solutions" | wc -w)
    for k in $krange; do
        echo -en "**k=$k**," >>$result
        for ((i = 1; i < $WORD_COUNT; i++)); do
            echo -en "," >>$result
        done
        # echo -en "|," >>$result
    done
    echo >>$result

    echo -en "datasets," >>$result
    for k in $krange; do
        for sol in $solutions; do
            echo -en "${sol#*-}," >>$result
        done
        # echo -en "|," >>$result
    done
    echo >>$result

    for fn in $datasets; do
        echo -en "$fn," >>$result
        for k in $krange; do

            line=()
            outfile=''
            for sol in $solutions; do
                outfile=$fn-$sol-$k.out
                op=$(grep "n_mkp" $outfile)
                op=($op)
                if [ -z "${op}" ]; then
                    echo -en "×,×,×,×," >>$result
                else
                    echo -en "${op[-7]},${op[-5]},${op[-3]},${op[-1]}," >>$result
                fi
            done
            # echo -en "|," >>$result
        done
        echo >>$result
    done
    cat $result
}
get_results_dense

get_kpsize() {
    # solutions='kplex-full kplex-doubt kPlexS Maple'
    result=kpsize.out
    rm $result
    # for k in $krange; do
    #     echo -en "**** k=$k ****,,," >>$result
    # done
    echo -en "datasets," >>$result

    for k in $krange; do
        echo -en "**k=$k**," >>$result
        for sol in $solutions; do
            echo -en "${sol#*-}," >>$result
        done
    done

    echo >>$result

    for fn in $datasets; do
        echo -en "$fn,|," >>$result
        for k in $krange; do
            for sol in $solutions; do
                outfile=$sol-$k.out
                op=$(grep $fn $outfile)
                if [ -z "${op}" ]; then
                    echo -en 'x,' >>$result
                else
                    op=($op)
                    echo -en "${op[-5]}," >>$result
                fi
            done
            echo -en "|," >>$result
        done
        echo >>$result
    done
    cat $result
}

get_kpsize() {
    # solutions='kplex-full kplex-doubt kPlexS Maple'
    result=kpsize.out
    rm $result
    # for k in $krange; do
    #     echo -en "**** k=$k ****,,," >>$result
    # done
    echo -en "datasets," >>$result

    for k in $krange; do
        echo -en "**k=$k**," >>$result
        for sol in $solutions; do
            echo -en "${sol#*-}," >>$result
        done
    done

    echo >>$result

    for fn in $datasets; do
        echo -en "$fn," >>$result
        for k in $krange; do
            for sol in $solutions; do
                outfile=$sol-$k.out
                op=$(grep $fn $outfile)
                if [ -z "${op}" ]; then
                    echo -en 'x,' >>$result
                else
                    op=($op)
                    echo -en "${op[-7]}," >>$result
                fi
            done
            echo -en "|," >>$result
        done
        echo >>$result
    done
    cat $result
}

get_cost() {

    result=seesaw.out
    rm $result
    sol=kplex-nosetEnum
    for k in $krange; do
        echo >>$result

        echo "seesaw-cost" >>$result
        for fn in $datasets; do

            outfile=$sol-$k.out
            # [ -e "$fn" ] || continue
            op=$(grep $fn $outfile)
            if [ -z "${op}" ]; then
                echo -en "-," >>$result
            else
                op=($op)
                echo -en "${op[-1]}," >>$result
            fi
            echo >>$result
        done
    done
}

del_prev() {
    for sol in $solutions; do
        for k in $krange; do
            rm $sol-$k.out
        done
    done
}



datasets='
brock200-2
hamming6-2
ia-wiki-Talk
johnson8-4-4
keller4
p-hat500-1
sc-ldoor
sc-msdoor
soc-buzznet
soc-digg
socfb-A-anon
socfb-B-anon
socfb-Duke14
soc-gowalla
soc-lastfm
soc-LiveMocha
soc-orkut
soc-pokec
soc-youtube
soc-youtube-snap
'

solutions='Maple'
krange='2 3 4 5 6 7 8 9 10 15 20'
run_jobs 00:30:00
get_results

# get_cost

for ds in $datasets; do
    echo -en "$ds,"
    for k in $krange; do
        op=$(grep $ds-dense Ours-dense-$k.out)
        op=($op)
        if [ -z "${op}" ]; then
            echo -en ",,,,"
        else
            echo -en "${op[4]},${op[6]},${op[8]},${op[10]},"
        fi
    done
    echo
done

for ds in $datasets; do
    echo -en "$ds,"
    for k in $krange; do
        op=$(grep $ds Ours-$k.out)
        op=($op)
        if [ -z "${op}" ]; then
            echo -en ","
        else
            echo -en "${op[2]},"
        fi
    done
    echo
done

for ds in $datasets; do
    echo -en "$ds,"
    for k in $krange; do
        op=$(grep $ds Ours-counts-$k.out)
        op=($op)
        if [ -z "${op}" ]; then
            echo -en ",,"
        else
            echo -en "${op[6]},${op[8]},"
        fi
    done
    echo
done
