#!/bin/bash

#SBATCH --job-name=serial             ### Name of the job
#SBATCH --ntasks=196                    ### Number of Tasks
#SBATCH --cpus-per-task=1              ### Number of Tasks per CPU
#SBATCH --mem-per-cpu=10000                        ### Memory required, 4 gigabyte
#SBATCH --partition=short             ### Cheaha Partition
#SBATCH --time=10:00:00                 ### Estimated Time of Completion, 1 hour
#SBATCH --output=%x.out              ### Slurm Output file, %x is job name, %j is job id
#SBATCH --error=%x.err               ### Slurm Error file, %x is job name, %j is job id
#SBATCH --mail-type=END
#SBATCH --mail-user=akhlaque.ak@gmail.com
loc=/home/akhlaque.ak@gmail.com/graphs/large-collection/
run_jobs() {
    step_count=0
    max_steps=10000

    for k in $krange; do
        for sol in $solutions; do
            for fn in $datasets; do
                outfile=$fn-$sol-$k.out
                grep -q ">>" $outfile || {

                    # srun --unbuffered --nodes=1 --ntasks=1 -c 1 --time=$1 --exclusive ./$sol $loc/$fn.bin $k >$outfile 2>&1 &
                    echo $outfile
                    ((step_count++))

                    if ((step_count % max_steps == 0)); then
                        wait
                    fi
                }
            done
        done
    done

    # Wait for any remaining jobs
    wait
}

get_results() {
    result=results.out
    rm $result
    echo -en "," >>$result
    WORD_COUNT=$(echo "$solutions" | wc -w)
    for k in $krange; do
        echo -en "*k=$k*," >>$result
        for ((i = 1; i < $WORD_COUNT; i++)); do
            echo -en "," >>$result
        done
        echo -en "|," >>$result
    done
    echo >>$result

    echo -en "datasets," >>$result
    for k in $krange; do
        for sol in $solutions; do
            echo -en "${sol#*-}," >>$result
        done
        echo -en "|," >>$result
    done
    echo >>$result

    for fn in $datasets; do
        echo -en "$fn," >>$result
        for k in $krange; do

            line=()
            outfile=''
            for sol in $solutions; do
                outfile=$fn-$sol-$k.out
                op=$(grep ">>" $outfile | head -1)
                if [ -z "${op}" ]; then
                    line+=('9999999999')
                else
                    op=($op)
                    line+=(${op[-1]})
                fi
            done
            m=$(printf "%s\n" "${line[@]}" | sort -rn | tail -n1)
            secm=$(printf "%s\n" "${line[@]}" | sort -rn | tail -n2 | head -n1)

            for i in "${line[@]}"; do
                if [ "$i" == '9999999999' ]; then
                    echo -en '×,' >>$result
                elif [ "$i" == "$m" ]; then
                    if (($(echo "$i <= 0.5 * $secm" | bc -l))); then
                        echo $i | bc -l | xargs printf "**%.1f," >>$result
                    else
                        echo $i | bc -l | xargs printf "*%.1f," >>$result
                    fi
                elif [ "$i" == "$secm" ]; then
                    echo $i | bc -l | xargs printf "^%.1f," >>$result
                else
                    echo $i | bc -l | xargs printf "%.1f," >>$result
                fi

            done
            echo -en "|," >>$result
        done
        echo >>$result
    done
    cat $result
}
get_results

get_kpsize() {
    result=kpsize.out
    rm $result
    echo -en "," >>$result
    WORD_COUNT=$(echo "$solutions" | wc -w)
    for k in $krange; do
        echo -en "**k=$k**," >>$result
        for ((i = 1; i < $WORD_COUNT; i++)); do
            echo -en "," >>$result
        done
        echo -en "|," >>$result
    done
    echo >>$result

    echo -en "datasets," >>$result
    for k in $krange; do
        for sol in $solutions; do
            echo -en "${sol#*-}," >>$result
        done
        echo -en "|," >>$result
    done
    echo >>$result

    for fn in $datasets; do
        echo -en "$fn," >>$result
        for k in $krange; do

            line=()
            outfile=''
            for sol in $solutions; do
                outfile=$fn-$sol-$k.out
                op=$(grep ">>" $outfile | tail -1)
                if [ -z "${op}" ]; then
                    line+=('9999999999')
                else
                    op=($op)
                    line+=(${op[-3]})
                fi
            done
            m=$(printf "%s\n" "${line[@]}" | sort -rn | tail -n1)
            secm=$(printf "%s\n" "${line[@]}" | sort -rn | tail -n2 | head -n1)

            for i in "${line[@]}"; do
                if [ $i == '9999999999' ]; then
                    echo -en '×,' >>$result
                else
                    echo $i | bc -l | xargs printf "%d," >>$result
                fi
            done
            echo -en "|," >>$result
        done
        echo >>$result
    done
    cat $result
}
get_kpsize

# lists only file names without paths and .bin
# datasets=$(find $loc/*.bin -maxdepth 1 -type f -size +1M -exec basename {} .bin \;)
datasets='
12month1
aff-digg
aff-flickr-user-groups
Andrews
asia_osm
bayer01
bcsstk39
belgium_osm
blockqp1
c-54
c-57
c-59
c-60
c-61
c-62
c-62ghs
c-63
c-65
c-66b
c-66
c-68
c-69
c-70
c-71
c-72
c8_mat11
c8_mat11_I
c-big
ch7-8-b5
conf5_4-8x8-05
conf5_4-8x8-10
conf5_4-8x8-15
conf5_4-8x8-20
conf6_0-8x8-20
conf6_0-8x8-30
conf6_0-8x8-80
cont-201
cont-300
crystk01
crystk02
crystk03
debr
degme
dixmaanl
e18
ecology2
exdata_1
FEM_3D_thermal1
fe_ocean
flower_8_4
fome20
fome21
Ga3As3H12
germany_osm
GL7d18
great-britain_osm
heart2
heart3
hugebubbles-00020
human_gene1
human_gene2
ia-online-ads-criteo-attrs
ia-online-ads-criteo
italy_osm
kron_g500-logn16
kron_g500-logn17
kron_g500-logn18
kron_g500-logn19
kron_g500-logn21
largebasis
lp1
lp_cre_b
lp_osa_07
lp_osa_14
lp_osa_30
lp_osa_60
lp_pds_20
luxembourg_osm
m133-b3
MANN-a45
MANN-a81
mk12-b4
mk13-b5
mouse_gene
net100
net125
net150
net25
net50
net75
nlpkkt80
nug08-3rd
onera_dual
pcrystk02
pcrystk03
pds-30
pds-40
pds-50
pds-90
psmigr_1
psmigr_2
psmigr_3
rail4284
rail507
rail516
rail582
rajat31
relat9
rlfddd
rlfprim
sc205-2r
scc_fb-messages
scc_reality
scc_twitter-copen
shallow_water1
shallow_water2
shar_te2-b3
Si34H36
SiO2
soc-BlogCatalog
socfb-UCLA
soc-flickr
spal_004
std1_Jac3
t2em
thread
Trec13
Trec14
TSOPF_RS_b39_c30
venturiLevel3
viscoplastic2
web-ClueWeb09
soc-themarker
std1_Jac2
TSOPF_RS_b2383
TSOPF_RS_b2383_c1
nd3k
TSOPF_RS_b678_c2
Chebyshev4
wikipedia-link-en13
soc-livejournal-user-groups
soc-buzznet
sx-stackoverflow
soc-sinaweibo
web-wikipedia-growth
torso1
TSOPF_RS_b678_c1
wikipedia-link-en
TSOPF_RS_b2052_c1
aff-delicious-user-tag
bundle1
bibd_20_10
soc-orkut
delicious-ui
LargeRegFile
dbpedia-link
ia-wiki-Talk-dir
trackers
soc-digg
TSOPF_RS_b300_c3
TSC_OPF_1047
web-wikipedia_link_fr
nd12k
ca-hollywood-2009
web-wikipedia_link_it
soc-bitcoin
Trec12
nd24k
boyd2
web-wikipedia_link_de
socfb-uci-uni
fp
kron_g500-logn20
pattern1
sc-ldoor
rat
socfb-A-anon
socfb-B-anon
TSOPF_FS_b300
TSOPF_FS_b300_c1
soc-pokec
tech-ip
mip1
rec-epinions-user-ratings
sc-msdoor
soc-sign-epinions
soc-livejournal
web-baidu-baike
Geo_1438
rajat21
pkustk14
inf-road-usa
gupta3
Maragal_6
net4-1
af_shell10
dimacs9-USA
fullb
ohne2
soc-LiveMocha
troll
thermomech_dK
halfb
web-hudong
aff-wiki-wordbypage
av41092
fcondp2
web-wiki-ch-internal
ins2
af_2_k101
gearbox
dimacs9-CTR
smt
sc-pwtk
shipsec8
ca-coauthors-dblp
shipsec1
appu
crankseg_2
ship_001
msdoor
af_3_k101
boneS01
consph
t3dh
t3dh_e
F2
ia-wiki-user-edits-page
t3dh_a
web-uk-2005
bone010
pkustk08
ramage02
pkustk13
sc-pkustk13
sme3Dc
auto
barrier2-9
delaunay_n21
oilpan
pdb1HYS
af_1_k101
barrier2-12
barrier2-2
barrier2-3
barrier2-4
Serena
soc-flixster
barrier2-10
barrier2-11
bmwcra_1
Fault_639
gas_sensor
pkustk07
ship_003
bibd_22_8
delaunay_n22
GL7d15
IMDB
soc-lastfm
cant
GaAsH6
offshore
crashbasis
delaunay_n23
hugetrace-00010
hugetrace-00020
hugetric-00020
packing-500x100x100-b050
web-Google
HFE18_96_in
TSC_OPF_300
gsm_106857
hugebubbles-00010
ns3Da
qa8fm
road_central
web-it-2004
dielFilterV2clx
mixtank_new
s3dkt3m2
s4dkt3m2
sme3Db
TSOPF_FS_b300_c2
channel-500x100x100-b050
hood
Maragal_7
matrix_9
misc-IMDB-bi
pkustk10
web-wikipedia2009
af_0_k101
heart1
ldoor
s3dkq4m2
tsyl201
CO
dielFilterV3real
majorbasis
transient
3dtube
af23560
cit-Patents
delaunay_n20
engine
EX5
EX6
hugetric-00010
m14b
opt1
pwtk
road_usa
socfb-Texas84
socfb-UF
std1_Jac3_db
cop20k_A
dielFilterV2real
std1_Jac2_db
bbmat
bibd_19_9
boyd1
Dubcova3
ibm_matrix_2
IG5-18
lp_maros_r7
nemeth24
nemeth25
poisson3Db
rgg_n_2_20_s0
socfb-Indiana
soc-youtube-snap
af_shell6
Ga10As10H30
H2O
TF19
tp-6
3D_51448_3D
aff-wiki-en-article-cat
af_shell7
af_shell8
arabic-2005
audikw_1
Emilia_923
filter3D
nemeth22
nemeth23
nemeth26
rt-retweet-crawl
srb1
dielFilterV3clx
Hook_1498
nd6k
pkustk03
qa8fk
Reuters911
144
aff-delicious-url-tag
darcy003
delaunay_n24
f855_mat9_I
GL7d17
gupta2
misc-Reuters911
patents
rgg_n_2_22_s0
socfb-Penn94
socfb-UIllinois
soc-youtube
tmt_sym
trdheim
venkat01
venkat25
venkat50
web-google-dir
cage14
cfd2
GL7d23
kim1
parabolic_fem
RM07R
rma10
socfb-Duke14
aff-amazon-copurchases
amazon0312
amazon0505
amazon0601
as-Skitter
bibd_18_9
delaunay_n19
GL7d16
GL7d19
GL7d22
hugebubbles-00000
inf-roadNet-CA
li
mario002
mc2depi
m_t1
nasasrb
pkustk04
pkustk12
pli
Raj1
roadNet-CA
sc-nasasrb
Si41Ge41H72
sme3Da
socfb-Berkeley13
socfb-Wisconsin87
thermal2
web-BerkStan-dir
cfd1
dbir2
fem_filter
Flan_1565
kim2
PR02R
socfb-Stanford3
soc-FourSquare
Stanford
stormG2_1000
TSOPF_FS_b300_c3
TSOPF_RS_b300_c1
tube1
598a
bibd_17_8
ch8-8-b5
e40r0100
eu-2005
ex11
gupta1
helm2d03
hugetric-00000
IG5-17
in-2004
indochina-2004
invextr1_new
mono_500Hz
nemeth21
netherlands_osm
pkustk09
pkustk11
raefsky3
rgg_n_2_19_s0
roadNet-TX
sc-pkustk11
socfb-OR
tube2
uk-2005
vfem
watson_2
web-baidu-baike-related
bcsstk37
ch7-9-b5
crankseg_1
crystm03
dbir1
ia-wiki-Talk
lhr71c
light_in_tissue
msc23052
n4c6-b8
n4c6-b9
nemeth20
nsct
pkustk05
Pres_Poisson
qc2534
sinc18
sparsine
t3dl_a
t3dl
TF18
turon_m
aff-github-user2project
bcsstk33
bcsstk36
cage12
cage13
cage15
citationCiteseer
cnr-2000
crplat2
dawson5
dbpedia-all
delaunay_n18
Dubcova2
ESOC
f855_mat9
fe_rotor
flickr
Ge87H76
gyro
gyro_k
inf-roadNet-PA
kneser_10_4_1
livejournal-groupmemberships
livejournal-links
ljournal-2008
nemeth19
neos3
NotreDame_actors
olafu
pds-100
pkustk06
pre2
rajat29
rgg_n_2_18_s0
rim
roadNet-PA
sc-shipsec1
sc-shipsec5
shipsec5
Si87H76
sls
soc-delicious
socfb-MIT
socfb-UConn
soc-gowalla
thermomech_dM
torso3
TSOPF_FS_b162_c3
TSOPF_FS_b162_c4
TSOPF_FS_b39_c30
uk-2002
water_tank
wave
webbase-1M
web-italycnr-2000
wikipedia_link_it
wikipedia_link_ru
2D_54019_highK
ASIC_320k
bcsstk16
bcsstk31
bmw3_2
cegb2919
ch7-9-b4
ch8-8-b4
coater2
cyl6
d_pretok
EternityII_E
EternityII_Etilde
FEM_3D_thermal2
fem_hifreq_circuit
garon2
GL7d24
ia-wiki-trust-dir
IG5-15
IG5-16
inlet
lhr71
matrix-new_3
n4c6-b10
n4c6-b11
nemeth13
nw14
olesnik0
pkustk02
raefsky6
Rucci1
s1rmq4m1
soc-Epinions1
soc-Slashdot0811
soc-slashdot
stat96v2
stat96v3
StocF-1465
ted_AB
ted_A_unscaled
tomographic1
TSOPF_RS_b300_c2
ts-palko
viscorocks
watson_1
waveguide3D
adaptive
aff-dbpedia-users2country
amazon-ratings
ASIC_320ks
ASIC_680ks
atmosmodd
atmosmodj
bas1lp
bcsstk17
bcsstk29
bcsstk30
bcsstk32
bibd_16_8
brack2
c-64b
c-64
c-73b
c-73
ca-citeseer
ca-dblp-2010
ca-dblp-2012
CAG_mat1916
caidaRouterLevel
ca-MathSciNet
case39
cbuckle
cegb2802
ch7-8-b4
cit-HepPh
cit-HepTh2007
cit-HepTh
coAuthorsCiteseer
coAuthorsDBLP
connectus
cont1_l
copter2
crystm02
ct20stif
dblp-2010
dblp-author
dblp_coauthor
dbpedia-team
delaunay_n17
denormal
discogs_affiliation
discogs_genre
discogs_style
EAT_RS
EAT_SR
ecology1
email-EuAll
enron
EternityII_A
ex40
fe_tooth
flickr-growth
Freescale1
friendster
fs-EAT_SR
g7jac120
g7jac120sc
g7jac140
g7jac140sc
g7jac160
g7jac160sc
g7jac180
g7jac180sc
g7jac200
g7jac200sc
Ga19As19H42
Ge99H100
GL7d20
goodwin
graham1
GT01R
Hamrle3
helm3d01
hollywood-2009
ia-dbpedia-team-bi
ia-enron-email-dynamic
'
solutions='Maple-kPEX kPEX-Pivot_Br kPEX-S_Br'
krange='2 3 4 5 6 7 8 9 10 15 20'
run_jobs 00:10:00
get_results

# get_cost

for ds in $datasets; do
    echo -en "$ds,"
    for k in $krange; do
        op=$(grep $ds-dense Ours-dense-$k.out)
        op=($op)
        if [ -z "${op}" ]; then
            echo -en ",,,,"
        else
            echo -en "${op[4]},${op[6]},${op[8]},${op[10]},"
        fi
    done
    echo
done

for ds in $datasets; do
    echo -en "$ds,"
    for k in $krange; do
        op=$(grep $ds Ours-$k.out)
        op=($op)
        if [ -z "${op}" ]; then
            echo -en ","
        else
            echo -en "${op[2]},"
        fi
    done
    echo
done

echo -en ","
for k in $krange; do
    echo -en "$k,"
done
for ds in $datasets; do
    echo -en "$ds,"
    for k in $krange; do
        op=$(grep ">>" $ds-kPEX-after-maxkp-$k.out | tail -n1)
        op=($op)
        if [ -z "${op}" ]; then
            echo -en "×,"
        else
            echo -en "${op[-7]},"
            # echo  "${op[-3]} * 100" | bc -l | xargs printf "%.1f,"
        fi
        # echo -en "|,"
    done
    echo
done
