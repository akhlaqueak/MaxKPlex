#!/bin/bash

#SBATCH --job-name=medium             ### Name of the job
#SBATCH --ntasks=96                    ### Number of Tasks
#SBATCH --cpus-per-task=1              ### Number of Tasks per CPU
#SBATCH --mem-per-cpu=10000                        ### Memory required, 4 gigabyte
#SBATCH --partition=short             ### Cheaha Partition
#SBATCH --time=10:00:00                 ### Estimated Time of Completion, 1 hour
#SBATCH --output=%x.out              ### Slurm Output file, %x is job name, %j is job id
#SBATCH --error=%x.err               ### Slurm Error file, %x is job name, %j is job id
#SBATCH --mail-type=END
#SBATCH --mail-user=akhlaque.ak@gmail.com

loc=/home/akhlaque.ak@gmail.com/graphs/all_toBin_graphs/

run_jobs() {
    step_count=0
    max_steps=2000

    for k in $krange; do
        for sol in $solutions; do
            for fn in $datasets; do
                outfile=$fn-$sol-$k.out
                grep -q ">>" $outfile || {

                    srun --unbuffered --nodes=1 --ntasks=1 -c 1 --time=$1 --exclusive ./$sol $loc/$fn.bin $k >>$outfile 2>&1 &

                    ((step_count++))

                    if ((step_count % max_steps == 0)); then
                        wait
                    fi
                }
            done
        done
    done

    # Wait for any remaining jobs
    wait
}

get_results() {
    result=results.out
    rm $result
    echo -en "," >>$result
    WORD_COUNT=$(echo "$solutions" | wc -w)
    for k in $krange; do
        echo -en "*k=$k*," >>$result
        for ((i = 1; i < $WORD_COUNT; i++)); do
            echo -en "," >>$result
        done
        echo -en "|," >>$result
    done
    echo >>$result

    echo -en "datasets," >>$result
    for k in $krange; do
        for sol in $solutions; do
            echo -en "${sol#*-}," >>$result
        done
        echo -en "|," >>$result
    done
    echo >>$result

    for fn in $datasets; do
        echo -en "$fn," >>$result
        for k in $krange; do

            line=()
            outfile=''
            for sol in $solutions; do
                outfile=$fn-$sol-$k.out
                op=$(grep ">>" $outfile | head -1)
                if [ -z "${op}" ]; then
                    line+=('9999999999')
                else
                    op=($op)
                    line+=(${op[-1]})
                fi
            done
            m=$(printf "%s\n" "${line[@]}" | sort -rn | tail -n1)
            secm=$(printf "%s\n" "${line[@]}" | sort -rn | tail -n2 | head -n1)

            for i in "${line[@]}"; do
                if [ "$i" == '9999999999' ]; then
                    echo -en '×,' >>$result
                elif [ "$i" == "$m" ]; then
                    if (($(echo "$i <= 0.5 * $secm" | bc -l))); then
                        echo $i | bc -l | xargs printf "**%.1f," >>$result
                    else
                        echo $i | bc -l | xargs printf "*%.1f," >>$result
                    fi
                elif [ "$i" == "$secm" ]; then
                    echo $i | bc -l | xargs printf "^%.1f," >>$result
                else
                    echo $i | bc -l | xargs printf "%.1f," >>$result
                fi

            done
            echo -en "|," >>$result
        done
        echo >>$result
    done
    cat $result
}
get_results

get_kpsize() {
    result=kpsize.out
    rm $result
    echo -en "," >>$result
    WORD_COUNT=$(echo "$solutions" | wc -w)
    for k in $krange; do
        echo -en "**k=$k**," >>$result
        for ((i = 1; i < $WORD_COUNT; i++)); do
            echo -en "," >>$result
        done
        echo -en "|," >>$result
    done
    echo >>$result

    echo -en "datasets," >>$result
    for k in $krange; do
        for sol in $solutions; do
            echo -en "${sol#*-}," >>$result
        done
        echo -en "|," >>$result
    done
    echo >>$result

    for fn in $datasets; do
        echo -en "$fn," >>$result
        for k in $krange; do

            line=()
            outfile=''
            for sol in $solutions; do
                outfile=$fn-$sol-$k.out
                op=$(grep ">>" $outfile | tail -1)
                if [ -z "${op}" ]; then
                    line+=('9999999999')
                else
                    op=($op)
                    line+=(${op[-3]})
                fi
            done
            m=$(printf "%s\n" "${line[@]}" | sort -rn | tail -n1)
            secm=$(printf "%s\n" "${line[@]}" | sort -rn | tail -n2 | head -n1)

            for i in "${line[@]}"; do
                if [ $i == '9999999999' ]; then
                    echo -en '×,' >>$result
                else
                    echo $i | bc -l | xargs printf "%d," >>$result
                fi
            done
            echo -en "|," >>$result
        done
        echo >>$result
    done
    cat $result
}
get_kpsize

# datasets=$(find $loc/*.bin -maxdepth 1 -type f -exec basename {} .bin \;)

datasets='MANN-a81
wikipedia_link_fa
wikipedia_link_sh
wikipedia_link_sr
wikipedia_link_fr
scc_reality
web-wikipedia_link_en13-all
wikipedia_link_en
MANN-a45
uk-2002
wikipedia_link_it
web-wikipedia_link_it
wikipedia_link_war
wikipedia_link_de
wikipedia_link_nl
wikipedia_link_ru
aff-orkut-user2groups
trackers
livejournal-links
soc-LiveJournal1
wikipedia_link_sv
soc-bitcoin
link-dynamic-itwiki
zhishi-all
link-dynamic-dewiki
orkut-links
tech-ip
soc-digg
soc-orkut
link-dynamic-frwiki
soc-BlogCatalog
wiki_talk_en
sx-stackoverflow
soc-sinaweibo
delicious-ui
web-ClueWeb09
delicious-ti
edit-nlwiki
wikipedia_link_es
edit-itwiki
san200-0-9-2
soc-themarker
san200-0-9-1
soc-buzznet
rec-epinions-user-ratings
edit-ruwiki
dbpedia-link
edit-plwiki
edit-ptwiki
edit-svwiki
ia-wiki-Talk-dir
wiki-Talk
wikipedia_link_ceb
p-hat700-1
soc-livejournal-user-groups
livejournal-groupmemberships
edit-jawiki
bag-pubmed
edit-zhwiki
edit-enwiktionary
edit-arwiki
keller4
wiki-topcats
edit-ukwiki
soc-LiveMocha
p-hat500-1
socfb-Duke14
brock200-2
socfb-UF
zhishi-baidu-internallink
socfb-A-anon
bio-pdb1HYS
edit-viwiki
soc-lastfm
soc-flixster
cit-Patents
socfb-B-anon
soc-FourSquare
edit-frwiktionary
hamming6-2
johnson8-4-4
soc-pokec
edit-shwiki
consph
sc-pkustk13
connectus
sc-pwtk
sc-ldoor
sc-msdoor
rgg_n_2_24_s0
socfb-uci-uni
zhishi-hudong-relatedpages
dblp-author
channel-500x100x100-b050
packing-500x100x100-b050
auto
delaunay_n24
delaunay_n23
delaunay_n22
delaunay_n21
inf-europe_osm
inf-road_usa
inf-road-usa
dimacs9-USA
inf-road_central
venturiLevel3
inf-germany_osm
dimacs9-CTR
inf-italy_osm
hugetric-00020
hugetrace-00000
hugetrace-00020
hugetrace-00010'

solutions='degree_check'
krange='2 3 4 5 6 7 8 9 10 15 20'
run_jobs 00:30:00
get_results

# get_cost

for ds in $datasets; do
    echo -en "$ds,"
    for k in $krange; do
        op=$(grep $ds-dense Ours-dense-$k.out)
        op=($op)
        if [ -z "${op}" ]; then
            echo -en ",,,,"
        else
            echo -en "${op[4]},${op[6]},${op[8]},${op[10]},"
        fi
    done
    echo
done

for ds in $datasets; do
    echo -en "$ds,"
    for k in $krange; do
        op=$(grep $ds Ours-$k.out)
        op=($op)
        if [ -z "${op}" ]; then
            echo -en ","
        else
            echo -en "${op[2]},"
        fi
    done
    echo
done

echo -en ","
for k in $krange; do
    echo -en "$k,"
done
for ds in $datasets; do
    echo -en "$ds,"
    for k in $krange; do
        op=$(grep ">>" $ds-kPEX-after-maxkp-$k.out | tail -n1)
        op=($op)
        if [ -z "${op}" ]; then
            echo -en "×,"
        else
            echo -en "${op[-7]},"
            # echo  "${op[-3]} * 100" | bc -l | xargs printf "%.1f,"
        fi
        # echo -en "|,"
    done
    echo
done

k=2
get_param() {

    for d in $datasets; do
        fn="$d-degree_check-$k.out"

        ln=$(grep core_truss_copruning "$fn")
        [ -z "$ln" ] && printf '0 0 0' || {
            # echo "$ln" | awk '{printf " " $6 " " $9}'
            # echo "$ln" | awk '{ sub(/,$/, "", $6); printf " %s %s %.4f", $6, $9, $9 / $6 }'
            echo "$ln" | awk '{
            sub(/,$/, "", $6)
            if ($6 == 0)
                printf " %s %s 0", $6, $9
            else
                printf " %s %s %.4f", $6, $9, $9 / $6
        }'
        }

        ln=$(grep residual_max_degree "$fn")
        [ -z "$ln" ] && printf " 0 " || {
            echo "$ln" | awk '{printf " " $NF}'
        }

        ln=$(grep max_core_residual "$fn")
        [ -z "$ln" ] && printf " 0 " || {
            echo "$ln" | awk '{printf " " $NF " "}'
        }

        ln=$(grep kcore_size "$fn")
        [ -z "$ln" ] && echo " 0" || {
            kcore=$(echo "$ln" | awk -F': ' '{gsub(/ /, ",", $2); print $2}')
            kcore="${kcore%,}"
            # output=$(echo "$ln" | sed -E 's/^kcore_size: *//; s/ +/,/g')
            echo "$kcore"
        }
    done

}
